trigger:
  branches:
    include:
      - develop
      - feature/**
      - release/**
      - master
      - hotfix/**

pool:
  name: Default # Use self-host agent pool named 'Default'

resources:
  - repo: self

variables:
  buildConfiguration: Release
  solutionPath: ./RichillCapital.SharedKernel.slnx
  projectPath: ./src/RichillCapital.SharedKernel/RichillCapital.SharedKernel.csproj

stages:
  - stage: BuildStage
    displayName: Build
    jobs:
      - job: BuildJob
        displayName: Build
        steps:
          - script: dotnet build $(solutionPath) -c $(buildConfiguration)
            displayName: Build

          - script: dotnet test $(solutionPath) -c $(buildConfiguration) --no-build --no-restore --verbosity normal
            displayName: Test

      - job: PublishJob
        displayName: Publish
        dependsOn: BuildJob
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
        steps:
          - task: PowerShell@2
            displayName: Generate build version
            inputs:
              targetType: inline
              script: |
                $buildVersion = & $(Build.SourcesDirectory)/scripts/GenerateBuildVersion.ps1 -Revision $(Build.BuildId)
                Write-Host "##vso[task.setvariable variable=BuildVersion]$buildVersion"

          - script: dotnet pack $(projectPath) -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/artifacts -p:PackageVersion=$(BuildVersion)
            displayName: Publish build artifacts

          - task: PublishPipelineArtifact@1
            displayName: Publish pipeline artifact
            inputs:
              targetPath: $(Build.ArtifactStagingDirectory)/artifacts
              artifact: RichillCapital.SharedKernel-$(buildConfiguration)-$(BuildVersion)
              publishLocation: pipeline

  - stage: ReleaseStage
    displayName: Build release artifacts
    dependsOn: BuildStage
    condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')
    jobs:
      - job: ReleaseJob
        displayName: Build release artifacts
        steps:
          - task: PowerShell@2
            displayName: Generate release version
            inputs:
              targetType: inline
              script: |
                $releaseVersion = & $(Build.SourcesDirectory)/scripts/GenerateReleaseVersion.ps1 -BranchName "$(Build.SourceBranchName)"
                Write-Host "##vso[task.setvariable variable=ReleaseVersion]$releaseVersion"

          - script: dotnet pack $(projectPath) -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/artifacts -p:PackageVersion=$(ReleaseVersion)
            displayName: Publish build artifacts

          - task: PublishPipelineArtifact@1
            displayName: Publish pipeline artifact
            inputs:
              targetPath: $(Build.ArtifactStagingDirectory)/artifacts
              artifact: RichillCapital.SharedKernel-$(buildConfiguration)-$(ReleaseVersion)
              publishLocation: pipeline

  - stage: ProductionStage
    displayName: Production deployment
    dependsOn: BuildStage
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    jobs:
      - job: DeployProductionJob
        displayName: Publish to NuGet gallery
        steps:
          - task: PowerShell@2
            displayName: Generate release version from latest release branch
            inputs:
              targetType: inline
              script: |
                $releaseVersion = & $(Build.SourcesDirectory)/scripts/GetLatestReleaseVersion.ps1
                Write-Host "##vso[task.setvariable variable=ReleaseVersion]$releaseVersion"

          - script: dotnet pack $(projectPath) -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/artifacts -p:PackageVersion=$(ReleaseVersion)
            displayName: Generate production build

          - task: PowerShell@2
            displayName: Create and push git tag
            inputs:
              targetType: inline
              script: |
                git config user.name "Mengsyue Amao Tsai"
                git config user.email "mengsyue.tsai@outlook.com"
                git fetch --tags

                $tagName = "v$(ReleaseVersion)"
                $existingTags = git tag --list
                if ($existingTags -contains $tagName) {
                  Write-Host "Tag $tagName already exists."
                  exit 0
                }

                git tag -a "v$(ReleaseVersion)" -m "Release version $(ReleaseVersion)"
                git push origin "v$(ReleaseVersion)"

          - script: dotnet nuget push $(Build.ArtifactStagingDirectory)/**/*.nupkg --source https://api.nuget.org/v3/index.json --api-key $(NUGET_API_KEY) --skip-duplicate
            displayName: Publish to NuGet gallery
