trigger:
  branches:
    include:
      - develop
      - feature/**
      - release/**
      - master
      - hotfix/**

pr:
  branches:
    include:
      - develop
      - master

pool:
  name: 'Default' # Use self-host agent pool named 'Default'

variables:
  dotNetVersion: 8.0.x
  solution: ./RichillCapital.SharedKernel.sln
  package: ./RichillCapital.SharedKernel.nuspec
  
resources:
  - repo: self

stages:
  - stage: DevelopmentStage
    displayName: Development stage 

    variables:
      buildConfiguration: Release 
      
    jobs:
      - job: DevelopmentJob
        displayName: Development job 

        steps:
          - task: UseDotNet@2
            displayName: Use .NET sdk $(dotNetVersion)

          - script: dotnet restore $(solution) --no-cache 
            displayName: Restore dependencies 

          - script: dotnet build $(solution) -c $(buildConfiguration) --no-restore 
            displayName: Build solution ($(buildConfiguration))

          - script: dotnet test $(solution) -c $(buildConfiguration) --no-build --no-restore
            displayName: Test 

  - stage: ReleaseStage
    displayName: Release stage

    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))
    
    jobs:
      - job: ReleaseJob
        displayName: Release job

        variables:
          buildConfiguration: Release

        steps:
          - task: UseDotNet@2
            displayName: Use .NET sdk $(dotNetVersion)

          - task: PowerShell@2
            displayName: Generate release version 
            inputs:
              targetType: inline
              script: |
                Write-Host "Generating release version from branch: $(Build.SourceBranch)"

                $branchName = "$(Build.SourceBranchName)"
                Write-Host "##vso[task.setvariable variable=ReleaseVersion]$branchName"
                
                Write-Host "Generated Release Version: $branchName"
              
          - task: PowerShell@2
            displayName: Update nuspec file
            inputs:
              targetType: inline
              script: |
                $nuspecFile = Get-Content $(package)
                $nuspecFile = $nuspecFile -replace '<version>.*</version>', "<version>$(ReleaseVersion)</version>"
                $nuspecFile | Set-Content $(package)

                Write-Host "Updated nuspec file with version: $(ReleaseVersion)"

          - script: nuget pack $(package) -OutputDirectory $(Build.ArtifactStagingDirectory)/artifacts -NoDefaultExcludes
            displayName: Pack package $(package)

          - task: PublishPipelineArtifact@1
            displayName: Publish artifact 
            inputs:
              targetPath: $(Build.ArtifactStagingDirectory)/artifacts
              artifact: RichillCapital.SharedKernel-$(buildConfiguration)-$(ReleaseVersion)
              publishLocation: pipeline

  - stage: ProductionStage
    displayName: Production stage 
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    dependsOn: DevelopmentStage
    jobs:
      - job: ProductionJob
        displayName: Production job

        variables:
          buildConfiguration: Release

        steps:
          - task: PowerShell@2
            displayName: Generate release version from latest release branch
            inputs:
              targetType: inline
              script: |
                git fetch --all 

                $branches = git branch -r | Where-Object { $_ -match 'origin/release/\d+\.\d+\.\d+' }
                
                if (-not $branches) {
                    Write-Error "No matching branches found."
                    exit 1
                }                

                $versions = $branches |
                ForEach-Object {
                    if ($_ -match 'origin/release/(\d+\.\d+\.\d+)') {
                        [PSCustomObject]@{
                            BranchName = $_.Trim()
                            Version = [System.Version]$matches[1]
                        }
                    }
                }
                
                $latestBranch = $versions |
                    Sort-Object -Property Version -Descending |
                    Select-Object -First 1

                if ($latestBranch) {
                    Write-Host "##vso[task.setvariable variable=ReleaseVersion]$($latestBranch.Version)"
                    Write-Host "Generated release version: $($latestBranch.Version)"
                } else {
                    Write-Error "Failed to find the latest release branch."
                    exit 1
                }                
          
          - task: PowerShell@2
            displayName: Update nuspec file
            inputs:
              targetType: inline
              script: |
                $nuspecFile = Get-Content $(package)
                $nuspecFile = $nuspecFile -replace '<version>.*</version>', "<version>$(ReleaseVersion)</version>"
                $nuspecFile | Set-Content $(package)

                Write-Host "Updated nuspec file with version: $(ReleaseVersion)"

          - script: nuget pack $(package) -NoDefaultExcludes
            displayName: Pack package $(package)

          - task: UseDotNet@2
            displayName: Use .NET sdk $(dotNetVersion)
            inputs:
              packageType: 'sdk'
              version: $(dotNetVersion)

          - task: PowerShell@2
            displayName: Create and push Git tag 
            inputs:
              targetType: inline
              script: |
                git config user.name "Mengsyue Amao Tsai"
                git config user.email "mengsyue.tsai@outlook.com"

                git fetch --tags 
                $tagName = "v$(ReleaseVersion)"

                $existingTags = git tag --list 
                if ($existingTags -contains $tagName) {
                  Write-Host "Tag $tagName already exists."
                  exit 0
                }

          - script: nuget push ./**/*.nupkg -src https://api.nuget.org/v3/index.json -ApiKey $(NUGET_API_KEY) -SkipDuplicate
            displayName: Push package to NuGet  


              